#!/usr/bin/env python

import pandas as pd
from os import path
from glob import glob
from collections import defaultdict
from sys import argv

config = argv[1] if len(argv) > 1 else 'Parameters/RunConfig.cfg'
config_file = pd.read_table(config,
                            comment='#').dropna(how='all')

out = open('config.make', 'w')
targets = ' '.join(path.join('$(ANALYSIS_DIR)',
                             label,
                             'genes.fpkm_tracking')
                   for label in config_file['Label'])

targets_ambig = ' '.join(path.join('$(ANALYSIS_DIR)',
                                   label,
                                   'withambig',
                                   'genes.fpkm_tracking')
                         for label in config_file['Label'])
out.write("FPKMS = " + targets + "\n")
out.write("FPKMS_AMBIG = " + targets_ambig + "\n")

reads = defaultdict(lambda : ([], []))
carriers = defaultdict(list)
for i, row in config_file.iterrows():
    label = row['Label']
    index = int(row['Index'])
    mbepc = int(row['MBEPC'])
    carrier = row['CarrierID']
    glob_spec = ('sequence/*{id}*index{index}/*_R1_*.fastq*'
               .format(index=index, id=int(row['MBEPC'])))
    rf1 = glob(glob_spec)
    rf2 = glob('sequence/*{id}*index{index}_*/*_R2_*.fastq*'
               .format(index=index, id=int(row['MBEPC'])))
    if rf1 == []:
        print "Warning: no sequence for ", label, index
        print glob_spec
    if rf2 == []:
        print "Warning: No R2 sequence for ", label, index

    reads[label][0].extend(rf1)
    reads[label][1].extend(rf2)
    carriers[label].append(carrier)

for label in reads:
    reads1, reads2 = reads[label]
    out.write('$(ANALYSIS_DIR)/{label}: | $(ANALYSIS_DIR)\n'
              '\t mkdir $(ANALYSIS_DIR)/{label}\n'.format(label=label))
    out.write('$(ANALYSIS_DIR)/{label}/accepted_hits.bam: '
              ' {rfs} '
              ' Reference/{genome}/Genome'
              ' | $(ANALYSIS_DIR)/{label}\n'
              '\t@echo {label} \n'
              '\tSTAR --parametersFiles $(STARCONFIG) '
              '--genomeDir Reference/{genome} '
              '--outFileNamePrefix $(ANALYSIS_DIR)/{label}/ '
              '--readFilesIn {rf1} {rf2}\n'
              '\tsamtools view -bS -o $(ANALYSIS_DIR)/{label}/accepted_hits.bam'
              ' $(ANALYSIS_DIR)/{label}/Aligned.out.sam\n'
              '\trm $(ANALYSIS_DIR)/{label}/Aligned.out.sam\n'
             .format(rf1=','.join(reads1),
                     rf2=','.join(reads2),
                     rfs=' '.join(reads1 + reads2),
                     label=label,
                     genome='Dmel'+row['CarrierSpecies']
                    ))
    out.write('$(ANALYSIS_DIR)/{label}/{yeast}.bam:  '
              '$(ANALYSIS_DIR)/{label}/assigned_scer.bam\n'
              '\t@echo {yeast} \n'
              # Sort
              '\tsamtools sort $(ANALYSIS_DIR)/{label}/assigned_scer.bam '
              ' $(ANALYSIS_DIR)/{label}/assigned_scer_sorted \n'
              # Make new header
              "\tsamtools view -H $(ANALYSIS_DIR)/{label}/assigned_scer.bam"
              " | grep -Pv 'SN:(?!scer)' "
              " | python ReheaderYeast.py "
              " > $(ANALYSIS_DIR)/{label}/cer_only.header.sam\n"
              # Apply new header e.g.
              # samtools view analysis/ZE15/assigned_scer_sorted.bam \
              #  | cat analysis/ZE15/cer_only.header.sam - \
              #  | samtools view -bS -o analysis/ZE15/Y22.bam -
              "\tsamtools view $(ANALYSIS_DIR)/{label}/assigned_scer_sorted.bam"
              " | python ReheaderYeast.py "
              " | cat  $(ANALYSIS_DIR)/{label}/cer_only.header.sam -"
              " | samtools view -bS -o $@ - \n"
              # Remove temporary
              "\t rm $(ANALYSIS_DIR)/{label}/assigned_scer_sorted.bam\n"
              .format(label=label, yeast='+'.join(carriers[label])))


yeasts = ' '.join(path.join('$(ANALYSIS_DIR)',
                            label,
                            '+'.join(carriers)+'.bam')
                  for label, carriers in carriers.iteritems())

out.write("yeasts : " + yeasts +
          "\n\ttar -cvf $(ANALYSIS_DIR)/yeast.tar "
          + yeasts +
          "\n\t@echo 'Done making yeast'\n")
