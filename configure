#!/usr/bin/env python

import pandas as pd
from os import path
from glob import glob
from collections import defaultdict

tophat_str = ('$(ANALYSIS_DIR)/{label}/accepted_hits.bam: '
              ' {rfs} '
              ' Reference/{genome}/transcriptome '
              ' | $(ANALYSIS_DIR)/{label}\n'
              '\t@echo {label} \n'
              '\t tophat '
              '--read-mismatches 6 --read-edit-dist 6 '
              '--report-secondary-alignments '
              '--output-dir $(ANALYSIS_DIR)/{label}/ '
              '--transcriptome-index Reference/{genome}/transcriptome '
              '--transcriptome-only '
              # No need to sort automatically, for compatibility with
              # the STAR-based pipeline
              '--no-sort-bam '
              '--b2-sensitive '
              '--num-threads 12 '
              'Reference/{genome} '
              '{rf1} {rf2}\n')
star_str = ('$(ANALYSIS_DIR)/{label}/accepted_hits.bam: '
            ' {rfs} '
            ' Reference/{genome}/Genome '
            ' | $(ANALYSIS_DIR)/{label}\n'
            '\t@echo {label} \n'
            '\tSTAR --parametersFiles $(STARCONFIG) '
            '--genomeDir Reference/{genome} '
            '--outFileNamePrefix $(ANALYSIS_DIR)/{label}/ '
            '--readFilesIn {rf1} {rf2}\n'
            '\tsamtools view -bS -o $(ANALYSIS_DIR)/{label}/accepted_hits.bam'
            ' $(ANALYSIS_DIR)/{label}/Aligned.out.sam\n'
            '\trm $(ANALYSIS_DIR)/{label}/Aligned.out.sam\n')

mappers = {'star': star_str, 'tophat' : tophat_str}

def parse_arguments():
    from argparse import ArgumentParser
    p = ArgumentParser(description='Configuration script for SliceSeq data processing')
    p.add_argument('parameters', type=file, nargs='?',
                   default=open('Parameters/RunConfig.cfg'),
                   help='Configuration table for the sequences')
    p.add_argument('--seqdir', type=str, default='sequence*',
                   help='Sequence directory (or glob pattern) to look in for'
                   ' reads')
    p.add_argument('--mapper', type=str, default='star',
                   help='Mapper to use. Options: [star], tophat')
    args =  p.parse_args()
    if args.mapper.lower() in mappers:
        args.mapper_str = mappers[args.mapper.lower()]
    else:
        import sys
        sys.stderr.write('Unrecognized mapper: "{}". \n'
                         'Valid options are: {}\n'
                         .format(args.mapper,
                                 ', '.join(mappers)))
        sys.exit(1)
    return args



args = parse_arguments()
config_file = pd.read_table(args.parameters,
                            comment='#').dropna(how='all')

out = open('config.make', 'w')
targets = ' '.join(path.join('$(ANALYSIS_DIR)',
                             label,
                             'genes.fpkm_tracking')
                   for label in config_file['Label'])

targets_all = ' '.join(path.join('$(ANALYSIS_DIR)',
                             label, 'all',
                             'genes.fpkm_tracking')
                   for label in config_file['Label'])

out.write("FPKMS = {} {} \n".format(targets, targets_all))

reads = defaultdict(lambda : ([], []))
sample_species = {}
for i, row in config_file.iterrows():
    label = row['Label']
    index = row['Index']
    mbepc = int(row['MBEPC'])
    species = row['SampleSpecies']
    glob_spec = ('{seqdir}/*/*{label}*/*_{{read}}_*.fastq*'
               .format(seqdir=args.seqdir, label=label, index=index, id=mbepc))
    rf1 = glob(glob_spec.format(read='R1'))
    if rf1 == []:
        glob_spec = ('{seqdir}/*{index}*/*_{{read}}*.fastq*'
                    .format(seqdir=args.seqdir, label=label, index=index,
                            id=mbepc))
        rf1 = glob(glob_spec.format(read='R1'))
        if rf1 == []:
            print "Warning: no sequence for ", label, index
            print glob_spec.format(read='R1')
    rf2 = glob(glob_spec.format(read='R2'))
    if rf2 == []:
        print "Warning: No R2 sequence for ", label, index

    reads[label][0].extend(sorted(rf1))
    reads[label][1].extend(sorted(rf2))
    sample_species[label] = species

for label in reads:
    reads1, reads2 = reads[label]
    out.write('$(ANALYSIS_DIR)/{label}: | $(ANALYSIS_DIR)\n'
              '\t mkdir $(ANALYSIS_DIR)/{label}\n'.format(label=label))
    out.write( args.mapper_str
             .format(rf1=','.join(reads1),
                     rf2=','.join(reads2),
                     rfs=' '.join(reads1 + reads2),
                     label=label,
                     genome=sample_species[label],
                    ))
